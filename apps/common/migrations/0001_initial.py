# Generated by Django 5.2.5 on 2025-08-19 02:54

import re
import uuid

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Country",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=100, unique=True)),
                (
                    "code",
                    models.CharField(
                        blank=True,
                        help_text="ISO 3166-1 alpha-2 (eg. US, TH, GB)",
                        max_length=3,
                        unique=True,
                    ),
                ),
                (
                    "calling_code",
                    models.CharField(
                        blank=True,
                        help_text="e.g. '1' for (+1 USA) or '66' (+66 TH)",
                        max_length=3,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "countries",
            },
        ),
        migrations.CreateModel(
            name="Currency",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "code",
                    models.CharField(
                        help_text="ISO 4217 currency code (eg. USD, THB, GBP)",
                        max_length=3,
                        unique=True,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "currencies",
            },
        ),
        migrations.CreateModel(
            name="Document",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Image",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("thumbnail_url", models.URLField(blank=True, default="", null=True)),
            ],
        ),
        migrations.CreateModel(
            name="SMS",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("to_number", models.CharField(max_length=15)),
                ("from_number", models.CharField(blank=True, max_length=15, null=True)),
                ("body", models.TextField(default="")),
                ("sent_at", models.DateTimeField(blank=True, null=True)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                (
                    "external_id",
                    models.CharField(
                        blank=True,
                        help_text="Message SID from Twilio",
                        max_length=34,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        help_text="Current status of the message (queued, sent, delivered, failed, etc.)",
                        max_length=20,
                        null=True,
                    ),
                ),
                ("error_code", models.CharField(blank=True, max_length=20, null=True)),
                ("error_message", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "SMS",
                "verbose_name_plural": "SMS Messages",
            },
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                ("slug", models.SlugField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True, default="")),
                ("is_active", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "phone_number",
                    models.CharField(blank=True, default="", max_length=15),
                ),
                (
                    "biography",
                    models.TextField(blank=True, default="", verbose_name="Biography"),
                ),
                ("is_email_verified", models.BooleanField(default=False)),
                ("is_beta_tester", models.BooleanField(default=False)),
                ("agreed_to_terms_at", models.DateTimeField(blank=True, null=True)),
                ("has_payment_method", models.BooleanField(default=False)),
                (
                    "stripe_customer_id",
                    models.CharField(blank=True, default="", max_length=255),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="City",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=100, unique=True)),
                ("code", models.CharField(blank=True, max_length=3, unique=True)),
                (
                    "country",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="cities",
                        to="common.country",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "cities",
            },
        ),
        migrations.CreateModel(
            name="Address",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("line_1", models.CharField(blank=True, max_length=100, null=True)),
                ("line_2", models.CharField(blank=True, max_length=100, null=True)),
                ("line_3", models.CharField(blank=True, max_length=100, null=True)),
                ("city", models.CharField(blank=True, max_length=35, null=True)),
                ("region", models.CharField(blank=True, max_length=35, null=True)),
                ("postal_code", models.CharField(blank=True, max_length=10, null=True)),
                ("google_map_link", models.URLField(blank=True, null=True)),
                (
                    "country",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="addresses",
                        to="common.country",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "addresses",
            },
        ),
        migrations.AddField(
            model_name="country",
            name="currency",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="countries",
                to="common.currency",
            ),
        ),
        migrations.CreateModel(
            name="PDF",
            fields=[
                (
                    "document_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="common.document",
                    ),
                ),
            ],
            bases=("common.document",),
        ),
        migrations.CreateModel(
            name="Note",
            fields=[
                ("is_author_anonymous", models.BooleanField(default=False)),
                ("authored_at", models.DateTimeField(auto_now_add=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("text", models.TextField(blank=True, default="")),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)ss",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BlogPost",
            fields=[
                ("is_author_anonymous", models.BooleanField(default=False)),
                ("authored_at", models.DateTimeField(auto_now_add=True)),
                ("valid_at", models.DateTimeField(blank=True, null=True)),
                ("expired_at", models.DateTimeField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
                ("latitude", models.FloatField(blank=True, null=True)),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="URL-friendly version of the name. Auto-generated if blank.",
                        null=True,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[-a-zA-Z0-9_]+\\Z"),
                                "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                                "invalid",
                            )
                        ],
                    ),
                ),
                ("published_at", models.DateTimeField(blank=True, null=True)),
                ("edited_at", models.DateTimeField(blank=True, null=True)),
                ("unpublished_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("subtitle", models.CharField(blank=True, default="", max_length=255)),
                ("content", models.TextField()),
                ("reading_time_minutes", models.PositiveIntegerField(default=3)),
                ("tags", models.CharField(blank=True, default="", max_length=255)),
                (
                    "address",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="common.address",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)ss",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "featured_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="featured_blog_posts",
                        to="common.image",
                    ),
                ),
                ("notes", models.ManyToManyField(to="common.note")),
            ],
            options={
                "verbose_name": "Blog Post",
                "verbose_name_plural": "Blog Posts",
                "ordering": ["-published_at", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "stripe_id",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Stripe subscription ID",
                        max_length=255,
                    ),
                ),
                (
                    "stripe_customer_id",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Stripe customer ID",
                        max_length=255,
                    ),
                ),
                (
                    "stripe_price_id",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Stripe price ID",
                        max_length=255,
                    ),
                ),
                (
                    "stripe_subscription_id",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Stripe subscription ID (legacy)",
                        max_length=255,
                    ),
                ),
                (
                    "plan_name",
                    models.CharField(
                        help_text="Subscription plan name", max_length=100
                    ),
                ),
                (
                    "plan_description",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text="Description of the subscription plan",
                    ),
                ),
                (
                    "price",
                    models.PositiveIntegerField(
                        help_text="Subscription price in cents"
                    ),
                ),
                (
                    "interval",
                    models.CharField(
                        choices=[
                            ("monthly", "Monthly"),
                            ("yearly", "Yearly"),
                            ("weekly", "Weekly"),
                            ("daily", "Daily"),
                        ],
                        default="monthly",
                        help_text="Billing interval",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("canceled", "Canceled"),
                            ("past_due", "Past Due"),
                            ("trialing", "Trialing"),
                            ("unpaid", "Unpaid"),
                            ("incomplete", "Incomplete"),
                            ("incomplete_expired", "Incomplete Expired"),
                        ],
                        default="active",
                        help_text="Subscription status",
                        max_length=20,
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the subscription started",
                    ),
                ),
                (
                    "end_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the subscription ended or will end",
                        null=True,
                    ),
                ),
                (
                    "canceled_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the subscription was canceled",
                        null=True,
                    ),
                ),
                (
                    "trial_end",
                    models.DateTimeField(
                        blank=True, help_text="When the trial period ends", null=True
                    ),
                ),
                (
                    "current_period_start",
                    models.DateTimeField(
                        blank=True,
                        help_text="Start of the current billing period",
                        null=True,
                    ),
                ),
                (
                    "current_period_end",
                    models.DateTimeField(
                        blank=True,
                        help_text="End of the current billing period",
                        null=True,
                    ),
                ),
                (
                    "cancel_at_period_end",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the subscription will be canceled at the end of the current period",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who owns the subscription",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscriptions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Subscription",
                "verbose_name_plural": "Subscriptions",
                "ordering": ("-created_at",),
            },
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "stripe_id",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Stripe payment intent ID",
                        max_length=255,
                    ),
                ),
                (
                    "stripe_customer_id",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Stripe customer ID",
                        max_length=255,
                    ),
                ),
                (
                    "stripe_payment_intent_id",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Stripe payment intent ID (legacy)",
                        max_length=255,
                    ),
                ),
                (
                    "amount",
                    models.PositiveIntegerField(help_text="Payment amount in cents"),
                ),
                (
                    "currency",
                    models.CharField(
                        default="USD",
                        help_text="Currency code (USD, EUR, etc.)",
                        max_length=3,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("succeeded", "Succeeded"),
                            ("failed", "Failed"),
                            ("refunded", "Refunded"),
                            ("canceled", "Canceled"),
                        ],
                        default="pending",
                        help_text="Payment status",
                        max_length=20,
                    ),
                ),
                (
                    "payment_method",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("card", "Credit/Debit Card"),
                            ("bank_transfer", "Bank Transfer"),
                            ("apple_pay", "Apple Pay"),
                            ("google_pay", "Google Pay"),
                            ("paypal", "PayPal"),
                        ],
                        default="",
                        help_text="Payment method used",
                        max_length=50,
                    ),
                ),
                (
                    "last4",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Last 4 digits of card",
                        max_length=4,
                    ),
                ),
                (
                    "paid_at",
                    models.DateTimeField(
                        blank=True, help_text="When the payment was made", null=True
                    ),
                ),
                (
                    "refunded_at",
                    models.DateTimeField(
                        blank=True, help_text="When the payment was refunded", null=True
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Payment description",
                        max_length=255,
                    ),
                ),
                (
                    "receipt_url",
                    models.URLField(
                        blank=True, default="", help_text="URL for payment receipt"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who made the payment",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "subscription",
                    models.ForeignKey(
                        blank=True,
                        help_text="Subscription this payment is for",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="payments",
                        to="common.subscription",
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment",
                "verbose_name_plural": "Payments",
                "ordering": ("-created_at",),
            },
        ),
        migrations.CreateModel(
            name="TeamAPIKey",
            fields=[
                (
                    "id",
                    models.CharField(
                        editable=False,
                        max_length=150,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("prefix", models.CharField(editable=False, max_length=8, unique=True)),
                ("hashed_key", models.CharField(editable=False, max_length=150)),
                ("created", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "revoked",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="If the API key is revoked, clients cannot use it anymore. (This cannot be undone.)",
                    ),
                ),
                (
                    "expiry_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Once API key expires, clients cannot use it anymore.",
                        null=True,
                        verbose_name="Expires",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50)),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="api_keys",
                        to="common.team",
                    ),
                ),
            ],
            options={
                "verbose_name": "Team API Key",
                "verbose_name_plural": "Team API Keys",
                "ordering": ("-created",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TeamMember",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("owner", "Owner"),
                            ("admin", "Admin"),
                            ("member", "Member"),
                        ],
                        default="member",
                        max_length=20,
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="common.team"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["team", "role", "user"],
                "unique_together": {("team", "user")},
            },
        ),
        migrations.AddField(
            model_name="team",
            name="members",
            field=models.ManyToManyField(
                related_name="teams",
                through="common.TeamMember",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="Upload",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("original", models.URLField(default="")),
                ("name", models.CharField(blank=True, max_length=100, null=True)),
                ("thumbnail", models.URLField(blank=True, default="", null=True)),
                ("meta_data", models.JSONField(blank=True, null=True)),
                ("s3_bucket", models.CharField(blank=True, max_length=255, null=True)),
                ("s3_key", models.CharField(blank=True, max_length=1024, null=True)),
                (
                    "content_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("size", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("complete", "Complete"),
                            ("error", "Error"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("error", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Upload",
                "verbose_name_plural": "Uploads",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["status"], name="common_uplo_status_3034b6_idx"
                    ),
                    models.Index(
                        fields=["s3_bucket", "s3_key"],
                        name="common_uplo_s3_buck_f2d3cf_idx",
                    ),
                ],
            },
        ),
        migrations.AddField(
            model_name="image",
            name="upload",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="images",
                to="common.upload",
            ),
        ),
        migrations.CreateModel(
            name="Email",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("to_address", models.CharField(max_length=140)),
                (
                    "from_address",
                    models.CharField(
                        default="Support <support@example.com>", max_length=140
                    ),
                ),
                ("subject", models.TextField(max_length=140)),
                ("body", models.TextField(default="")),
                (
                    "type",
                    models.SmallIntegerField(
                        blank=True,
                        choices=[
                            (0, "notification"),
                            (1, "confirmation"),
                            (2, "password"),
                        ],
                        default=0,
                        null=True,
                    ),
                ),
                ("sent_at", models.DateTimeField(blank=True, null=True)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                (
                    "attachments",
                    models.ManyToManyField(
                        blank=True,
                        related_name="common_email_attachments",
                        to="common.upload",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="document",
            name="upload",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="documents",
                to="common.upload",
            ),
        ),
        migrations.CreateModel(
            name="UserAPIKey",
            fields=[
                (
                    "id",
                    models.CharField(
                        editable=False,
                        max_length=150,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("prefix", models.CharField(editable=False, max_length=8, unique=True)),
                ("hashed_key", models.CharField(editable=False, max_length=150)),
                ("created", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "revoked",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="If the API key is revoked, clients cannot use it anymore. (This cannot be undone.)",
                    ),
                ),
                (
                    "expiry_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Once API key expires, clients cannot use it anymore.",
                        null=True,
                        verbose_name="Expires",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="api_keys",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User API Key",
                "verbose_name_plural": "User API Keys",
                "ordering": ("-created",),
                "abstract": False,
            },
        ),
    ]
